''' plotter.py

    visualises one of the .csv files in the results folder that
    have been generated by the main.py code.
'''
import numpy as np
import matplotlib.pyplot as plt
from brian2.units.stdunits import mV, ms, mS, uA, nA, namp

def plot_dynamicclamp(inj_dynamic, voltage, hidden_state, dt, window=None):
    ''' Plots the injected conductance and voltage trace.

       INPUT
       inj_dynamic (tuple): (g_exc, g_inh) input injected into the neuron.
       voltage (array): voltage of the model during the stimulation
       hidden_state (array): binary array representing the hidden state
       dt (float): time step of the simulation in milliseconds
       window (array): [start, stop] in ms

       OUTPUT
       matplotlib.figure
    '''
    g_exc, g_inh = inj_dynamic

    # Check
    if window:
        start, stop = window
        g_exc = g_exc[start:stop]
        g_inh = g_inh[start:stop]
        voltage = voltage[start:stop]
        hidden_state = hidden_state[start:stop]
        time = np.arange(start, stop)
        dt = 1
    else:
        start = 0
        time = np.arange(start, len(hidden_state))*dt

    # Plot
    fig, axs = plt.subplots(3, figsize=(12,12))
    fig.suptitle('Dynamic Clamp')
    for idx, val in enumerate(hidden_state):
        idx += start
        if val == 1:
            axs[0].axvline(idx*dt, c='lightgray')
            axs[1].axvline(idx*dt, c='lightgray')
            axs[2].axvline(idx*dt, c='lightgray')

    axs[0].plot(time, abs(g_exc), c='red')
    axs[0].set(ylabel='Exc. conductance [mS]')

    axs[1].plot(time, abs(g_inh), c='blue')
    axs[1].set(ylabel='Inh. conductance [mS]')

    axs[2].plot(time, voltage, c='black')
    axs[2].set(ylabel='Voltage [mV]', xlabel='Time [ms]')
    plt.show()

    return


def plot_currentclamp(inj_current, voltage, hidden_state, dt, window=None):
    '''Plots the injected current and voltage trace.

        
       INPUT
       inj_dynamic (tuple): (g_exc, g_inh) input injected into the neuron.
       voltage (array): voltage of the model during the stimulation
       hidden_state (array): binary array representing the hidden state
       dt (float): time step of the simulation in milliseconds
       window (array): [start, stop] in ms

       OUTPUT
       matplotlib.figure
    '''
    # Check
    if window:
        start, stop = window
        inj_current = inj_current[start:stop]
        voltage = voltage[start:stop]
        hidden_state = hidden_state[start:stop]
        time = np.arange(start, stop)
        dt = 1
    else:
        start = 0
        time = np.arange(start, len(hidden_state))*dt

    fig, axs = plt.subplots(2, figsize=(12,12))
    fig.suptitle('Current Clamp')
    for idx, val in enumerate(hidden_state):
        idx += start
        if val == 1:
            axs[0].axvline(idx*dt, c='lightgray')
            axs[1].axvline(idx*dt, c='lightgray')
    axs[0].plot(time, inj_current, c='red')
    axs[0].set(ylabel='Input current [uA]')
  
    axs[1].plot(time, voltage, c='black')
    axs[1].set(ylabel='Voltage [mV]', xlabel='Time [ms]')
    plt.show()

    return
